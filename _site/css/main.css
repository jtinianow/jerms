/*****************************************************************************/
/*
/* Common
/*
/*****************************************************************************/
/* Global Reset */
* {
  margin: 0;
  padding: 0; }

html, body {
  height: 100%; }

body {
  background-color: #FCFCFC;
  font-size: 18px;
  line-height: 1.5;
  font-weight: normal; }

h1, h2, h3, h4, h5, h6, p, ul, ol {
  font-size: 100%;
  font-weight: 300;
  margin-bottom: 1rem; }

h1 {
  margin-bottom: 1em; }

p {
  margin: 2em 0; }

a {
  color: inherit;
  text-decoration: none; }

ul {
  list-style: none; }

ol {
  margin-left: 1.2em; }

.highlight {
  background: #ffffff; }

.highlight .c {
  color: #999988;
  font-style: italic; }

/* Comment */
.highlight .err {
  color: #a61717;
  background-color: #e3d2d2; }

/* Error */
.highlight .k {
  font-weight: bold; }

/* Keyword */
.highlight .o {
  font-weight: bold; }

/* Operator */
.highlight .cm {
  color: #999988;
  font-style: italic; }

/* Comment.Multiline */
.highlight .cp {
  color: #999999;
  font-weight: bold; }

/* Comment.Preproc */
.highlight .c1 {
  color: #999988;
  font-style: italic; }

/* Comment.Single */
.highlight .cs {
  color: #999999;
  font-weight: bold;
  font-style: italic; }

/* Comment.Special */
.highlight .gd {
  color: #000000;
  background-color: #ffdddd; }

/* Generic.Deleted */
.highlight .gd .x {
  color: #000000;
  background-color: #ffaaaa; }

/* Generic.Deleted.Specific */
.highlight .ge {
  font-style: italic; }

/* Generic.Emph */
.highlight .gr {
  color: #aa0000; }

/* Generic.Error */
.highlight .gh {
  color: #999999; }

/* Generic.Heading */
.highlight .gi {
  color: #000000;
  background-color: #ddffdd; }

/* Generic.Inserted */
.highlight .gi .x {
  color: #000000;
  background-color: #aaffaa; }

/* Generic.Inserted.Specific */
.highlight .go {
  color: #888888; }

/* Generic.Output */
.highlight .gp {
  color: #555555; }

/* Generic.Prompt */
.highlight .gs {
  font-weight: bold; }

/* Generic.Strong */
.highlight .gu {
  color: #aaaaaa; }

/* Generic.Subheading */
.highlight .gt {
  color: #aa0000; }

/* Generic.Traceback */
.highlight .kc {
  font-weight: bold; }

/* Keyword.Constant */
.highlight .kd {
  font-weight: bold; }

/* Keyword.Declaration */
.highlight .kp {
  font-weight: bold; }

/* Keyword.Pseudo */
.highlight .kr {
  font-weight: bold; }

/* Keyword.Reserved */
.highlight .kt {
  color: #445588;
  font-weight: bold; }

/* Keyword.Type */
.highlight .m {
  color: #009999; }

/* Literal.Number */
.highlight .s {
  color: #d14; }

/* Literal.String */
.highlight .na {
  color: #008080; }

/* Name.Attribute */
.highlight .nb {
  color: #0086B3; }

/* Name.Builtin */
.highlight .nc {
  color: #445588;
  font-weight: bold; }

/* Name.Class */
.highlight .no {
  color: #008080; }

/* Name.Constant */
.highlight .ni {
  color: #800080; }

/* Name.Entity */
.highlight .ne {
  color: #990000;
  font-weight: bold; }

/* Name.Exception */
.highlight .nf {
  color: #990000;
  font-weight: bold; }

/* Name.Function */
.highlight .nn {
  color: #555555; }

/* Name.Namespace */
.highlight .nt {
  color: #000080; }

/* Name.Tag */
.highlight .nv {
  color: #008080; }

/* Name.Variable */
.highlight .ow {
  font-weight: bold; }

/* Operator.Word */
.highlight .w {
  color: #bbbbbb; }

/* Text.Whitespace */
.highlight .mf {
  color: #009999; }

/* Literal.Number.Float */
.highlight .mh {
  color: #009999; }

/* Literal.Number.Hex */
.highlight .mi {
  color: #009999; }

/* Literal.Number.Integer */
.highlight .mo {
  color: #009999; }

/* Literal.Number.Oct */
.highlight .sb {
  color: #d14; }

/* Literal.String.Backtick */
.highlight .sc {
  color: #d14; }

/* Literal.String.Char */
.highlight .sd {
  color: #d14; }

/* Literal.String.Doc */
.highlight .s2 {
  color: #d14; }

/* Literal.String.Double */
.highlight .se {
  color: #d14; }

/* Literal.String.Escape */
.highlight .sh {
  color: #d14; }

/* Literal.String.Heredoc */
.highlight .si {
  color: #d14; }

/* Literal.String.Interpol */
.highlight .sx {
  color: #d14; }

/* Literal.String.Other */
.highlight .sr {
  color: #009926; }

/* Literal.String.Regex */
.highlight .s1 {
  color: #d14; }

/* Literal.String.Single */
.highlight .ss {
  color: #990073; }

/* Literal.String.Symbol */
.highlight .bp {
  color: #999999; }

/* Name.Builtin.Pseudo */
.highlight .vc {
  color: #008080; }

/* Name.Variable.Class */
.highlight .vg {
  color: #008080; }

/* Name.Variable.Global */
.highlight .vi {
  color: #008080; }

/* Name.Variable.Instance */
.highlight .il {
  color: #009999; }

/* Literal.Number.Integer.Long */
/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
body {
  font-family: "proxima-nova", Helvetica Neue, Helvetica, Arial, sans-serif;
  font-size: 0.9em;
  color: #444; }
  @media (min-width: 800px) {
    body {
      font-size: 1.2em; } }

.container {
  max-width: 55rem;
  margin: 0 1rem; }
  @media (min-width: 1200px) {
    .container {
      margin: 0 auto; } }

h4 {
  font-family: "calluna", Georgia, Times, serif;
  margin-top: 2rem;
  font-size: 1.75em;
  line-height: 1.2;
  color: #2b2b2b; }

h5 {
  margin-top: 2rem;
  margin-bottom: 0;
  font-size: 1.25em;
  line-height: 1.25;
  color: #5e5e5e; }

em {
  color: #777777; }

blockquote {
  font-size: 1.2em;
  line-height: 1.35;
  font-style: italic;
  color: #515151;
  margin: 2rem 0; }
  blockquote p {
    margin-bottom: 0; }
  blockquote blockquote {
    font-family: "proxima-nova", Helvetica Neue, Helvetica, Arial, sans-serif;
    font-size: 0.667em;
    font-style: normal;
    margin-top: 0; }
    blockquote blockquote p {
      margin: 0.5rem 0; }

p a, .post__container li a {
  text-decoration: underline; }

.post__container ul li {
  line-height: 2; }

.header-primary {
  *zoom: 1;
  margin-bottom: -2rem; }
  .header-primary:before, .header-primary:after {
    content: '';
    display: table; }
  .header-primary:after {
    clear: both; }

.footer-primary__wrapper {
  display: inline-block;
  width: 100%;
  margin-bottom: -2rem; }
  @media (min-width: 800px) {
    .footer-primary__wrapper {
      margin-bottom: 2rem; } }

.footer-primary {
  padding: 2rem 0; }
  .footer-primary a {
    text-decoration: underline; }
  .footer-primary__header {
    font-weight: 700; }
  .footer-primary__desc {
    margin-top: 0;
    display: inline-block;
    display: block;
    clear: both;
    float: none;
    width: 100%;
    margin-left: auto;
    margin-right: auto; }
    .footer-primary__desc:first-child {
      margin-left: auto; }
    .footer-primary__desc:last-child {
      margin-right: auto; }
    @media (min-width: 800px) {
      .footer-primary__desc {
        float: left;
        clear: none;
        width: 75%;
        margin-left: 0%;
        margin-right: 0%; } }
  .footer-primary__contact {
    display: inline-block;
    display: block;
    clear: both;
    float: none;
    width: 100%;
    margin-left: auto;
    margin-right: auto; }
    .footer-primary__contact:first-child {
      margin-left: auto; }
    .footer-primary__contact:last-child {
      margin-right: auto; }
    @media (min-width: 800px) {
      .footer-primary__contact {
        float: left;
        clear: none;
        width: 25%;
        margin-left: 0%;
        margin-right: 0%; } }
  .footer-primary__text {
    margin-top: 0;
    margin-bottom: 1rem; }

.site-title, .site-desc {
  display: inline-block;
  line-height: 4.75;
  float: left; }
  @media (min-width: 800px) {
    .site-title, .site-desc {
      font-size: 0.8em;
      line-height: 4.25; } }

.site-title {
  margin-top: 1rem;
  margin-bottom: 0;
  padding-right: 2rem; }

.post-header__wrapper {
  *zoom: 1;
  padding: 2rem 0;
  background: #333;
  color: #FCFCFC;
  margin-top: 1rem; }
  .post-header__wrapper:before, .post-header__wrapper:after {
    content: '';
    display: table; }
  .post-header__wrapper:after {
    clear: both; }
  @media (min-width: 800px) {
    .post-header__wrapper {
      padding: 8rem 0;
      margin-bottom: 2rem; } }

@media (min-width: 800px) {
  .post__container, .post-footer__nav__container {
    max-width: 44rem;
    padding-bottom: 4rem; } }

.post__container img {
  max-width: 100%;
  height: auto; }

@media (min-width: 800px) {
  .post-header__container {
    max-width: 44rem; } }

.post-header__title {
  font-family: "calluna", Georgia, Times, serif;
  font-weight: 700;
  font-size: 2.5em;
  line-height: 1.2;
  margin-bottom: 1.33333rem; }
  @media (min-width: 1200px) {
    .post-header__title {
      font-size: 3.5em;
      float: left;
      clear: none;
      width: 62.5%;
      margin-left: 0%;
      margin-right: 0%; } }

.post-header__details {
  display: block;
  clear: both;
  float: none;
  width: 100%;
  margin-left: auto;
  margin-right: auto; }
  .post-header__details:first-child {
    margin-left: auto; }
  .post-header__details:last-child {
    margin-right: auto; }
  @media (min-width: 1200px) {
    .post-header__details {
      padding-top: 1rem; } }

.post-header__subtitle {
  font-size: 1em;
  line-height: 1.25;
  color: #969696; }

.post-header__date {
  text-transform: uppercase;
  font-size: 0.8em;
  letter-spacing: 1px;
  color: #969696; }

.post__wrapper {
  margin-bottom: 4rem; }

.post-excerpt {
  font-weight: 700; }

.post-footer__nav {
  line-height: 3em; }
  .post-footer__nav__wrapper {
    padding-bottom: 6rem; }
    @media (min-width: 800px) {
      .post-footer__nav__wrapper {
        padding-bottom: 12rem; } }
  .post-footer__nav svg, .post-footer__nav span {
    vertical-align: middle; }
  .post-footer__nav .post-nav__link {
    float: left; }
    .post-footer__nav .post-nav__link svg:first-child {
      padding-right: 1rem; }
    .post-footer__nav .post-nav__link svg:last-child {
      padding-left: 1rem; }
    .post-footer__nav .post-nav__link span {
      transition: background 0.2s ease; }
      .post-footer__nav .post-nav__link span:hover {
        background: #FFFF77; }
  .post-footer__nav .post-nav__link--next {
    float: right; }
  .post-footer__nav .post-nav__link--inactive {
    color: #dddddd; }

.home__container {
  padding: 4rem 0; }
  @media (min-width: 800px) {
    .home__container {
      padding-bottom: 8rem; } }

.omega {
  display: block;
  clear: both;
  float: none;
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 1rem; }
  .omega:first-child {
    margin-left: auto; }
  .omega:last-child {
    margin-right: auto; }

.post__item {
  margin-bottom: 1rem; }

.post__link {
  font-size: 1em;
  text-decoration: underline;
  transition: background 0.2s ease; }
  @media (min-width: 800px) {
    .post__link {
      display: inline-block; } }
  .post__link:hover {
    background: #FFFF77; }

.post__date {
  display: block;
  color: #5e5e5e; }
  @media (min-width: 800px) {
    .post__date {
      display: inline-block; } }
